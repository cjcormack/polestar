<html><body><div>

<div id="%CHARTCANVAS%" style="background: %BACKGROUND_COLOR%; width: %CWIDTH%px; height: %CHEIGHT%px;"/>
<script type="text/javascript" src="/polestar/pub/protovis-d3.2.js"></script>
<script type="text/javascript"><!--
(function() {

gd = %DATA%;
len=gd.length;

var ybottom=%BOTTOM%;
var ytop=%TOP%;
var backgroundColor="%BACKGROUND_COLOR%";
var textColor="%TEXT_COLOR%";
var gridColor="%GRID_COLOR%";

var w = %WIDTH%,
    h = %HEIGHT%,
    x = pv.Scale.linear(0, len-1).range(0, w),
    y = pv.Scale.linear(ybottom,ytop).range(0, h);
    //y.nice();

var vis = new pv.Panel()
	.canvas("%CHARTCANVAS%")
    .width(w)
    .height(h)
    .top(%TOPMARGIN%)
    .left(10)
    .right(30)
    .bottom(%BOTTOMMARGIN%);


time = extractArray(gd,1,"");

//X-Axis
vis.add(pv.Rule)
    .data(%XTICKS%)
    .strokeStyle(gridColor)
    .left(x)
  .anchor("bottom").add(pv.Label).textAngle(Math.PI / 6)
	.textStyle(textColor)
    .text(function(d) { return time[d]; });

//Y-Axis
vis.add(pv.Rule)
    .data(%YTICKS%)
    .strokeStyle(gridColor)
    .bottom(y)
  .anchor("right").add(pv.Label)
  	.textStyle(textColor)
    .text(y.tickFormat);

%STACK_ELEMENTS%

%ELEMENTS%

%LEGEND%

%TITLE%

vis.render();

function extractArray(a, idx, defval)
{   var result = [];
    for (i=0; i<a.length; i++)
    { b=a[i];
      v=b[idx];
      if (v==null) v=defval;
      result.push(v);
    }
    return result;
}

function fixArray(a)
{   var result = [];
	var last;
	var backwardIndex;
    for (i=0; i<a.length; i++)
    {	var v=a[i];
    	if (v==null)
    	{	if (last==undefined)
    		{	backwardIndex=i;
    		}
    		else
    		{	v=last;
    		}
    	}
    	else
    	{	last=v;
    	}
    	result.push(v);
    }
    if (backwardIndex!=undefined)
    {	if (backwardIndex<a.length-1)
    	{	var v=a[backwardIndex+1];
    		for (i=backwardIndex; i>=0; i--)
    		{	result[i]=v;
    		}
    	}
    }
    
    return result;
}


function extractStackArray(a, idxs)
{   var result2 = [];
	for (j=0; j<idxs.length; j++)
	{	idx=idxs[j];
		row=extractArray(a,idx,null);
		result2.push(row);
	}
    return result2;
}


function drawArea(idx, fillStyle, strokeStyle, shape, heightFunction, baseline, interpolate, data, vis)
{	
	var d = extractArray(data,idx,null);
	var d2 = fixArray(d);
	//console.log(d2);
	var area=vis.add(pv.Area);
	
	area.data(d)
		.interpolate(interpolate)
		.bottom(function(d) { return d==null?y(baseline):y(baseline) } )
		.height(function(d) { return (heightFunction(d==null?d2[this.index]:d)-y(baseline)) } )
		.left(function() { return x(this.index);} )
		.segmented(true)
		.fillStyle( function(d){return d==null?"rgba(0,0,0,0)":fillStyle;} );
	/*
	if (strokeStyle!=null)
		area.strokeStyle(strokeStyle);
	if (shape!=null)
	{	area.add(pv.Dot)
			.shape(shape)
			.lineWidth(2)
			.strokeStyle(function(d){return d==null?null:strokeStyle;})
	    	.fillStyle(function(d){return d==null?null:fillStyle;})
			.bottom(function(d) { return heightFunction(d) });
	}
	*/
}

function drawLine(idx, strokeStyle, fillStyle, dashArray, lineWidth, shape, heightFunction, interpolate, data, vis)
{	var d = extractArray(data,idx,null);
	var d2 = fixArray(d);
	var line=vis.add(pv.Line);
	line.data(d).interpolate(interpolate)
		.bottom(function(d) { return heightFunction(d==null?d2[this.index]:d);  })
		.left(function() {return x(this.index)})
		.lineWidth(function(d){ return d==null?0:lineWidth; } )
		.strokeDasharray(dashArray)
		.segmented(true)
		.strokeStyle( function(d){ return strokeStyle; } );
	if (shape!=null)
	{	line.add(pv.Dot)
			.shape(shape)
			.lineWidth(lineWidth)
	    	.strokeStyle(function(d){return d==null?null:strokeStyle;})
	    	.fillStyle(function(d){return d==null?null:fillStyle;});
	}
}

function drawBar(idx, fillStyle, strokeStyle, heightFunction, baseline, width, data, vis)
{	var d=extractArray(gd,idx, null);
	var bar=vis.add(pv.Bar);
	bar.data(d)
		.bottom(function(d) { return heightFunction(d)>y(baseline)?y(baseline):heightFunction(d); } )
		.width(function() { return (this.index==0 || this.index==data.length-1)?width/2:width; })
		.height(function(d) { return d==null?0: (heightFunction(d)>y(baseline)?(heightFunction(d)-y(baseline)):(y(baseline)-heightFunction(d))) })
		.left(function() { return x(this.index)-((this.index==0)?0:(width*0.5)); } )
		.fillStyle( fillStyle );
	if (strokeStyle!=null)
		bar.strokeStyle(strokeStyle);
}

function drawBoolean(idx, fillStyle, strokeStyle, origin, height, data, vis)
{	var d=extractArray(data,idx, 0);
	var area=vis.add(pv.Area);
	area.data(d)
		.interpolate("step-before")
        .bottom(function(d) { return y(d?origin-height/2:origin-height/16); } )
        .height(function(d) { return y(d?height:height/8)-y(0); } )
        .left(function() { return x(this.index);} )
        .fillStyle( fillStyle );
   if (strokeStyle!=null)
		area.strokeStyle(strokeStyle);
}

})();
-->
</script>


</div></body></html>